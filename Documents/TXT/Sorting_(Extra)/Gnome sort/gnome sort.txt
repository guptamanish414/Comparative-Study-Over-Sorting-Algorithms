Gnome sort, originally proposed by Hamid Sarbazi-Azad in 2000 and called Stupid sort (not to be confused with Bogosort), and then later on described by Dick Grune and named "Gnome sort",[1] is a sorting algorithm which is similar to insertion sort, except that moving an element to its proper place is accomplished by a series of swaps, as in bubble sort. It is conceptually simple, requiring no nested loops. The running time is O(n^2), but tends towards O(n) if the list is initially almost sorted.[2] In practice the algorithm can run as fast as Insertion sort. The average runtime is O(n^2).

The algorithm always finds the first place where two adjacent elements are in the wrong order, and swaps them. It takes advantage of the fact that performing a swap can introduce a new out-of-order adjacent pair only right before or after the two swapped elements. It does not assume that elements forward of the current position are sorted, so it only needs to check the position directly before the swapped elements.

The name comes from the supposed behavior of the Dutch garden gnome in sorting a line of flowerpots and is described on Dick Grune's Gnome sort page:

    Gnome Sort is based on the technique used by Dutch Garden Gnomes (Du.: tuinkabouter). Here is how a garden gnome sorts a line of flower pots. Basically, he looks at the flower pot next to him and the previous one; if they are in the right order he steps one pot forward, otherwise he swaps them and steps one pot backwards. Boundary conditions: if there is no previous pot, he steps forwards; if there is no pot next to him, he is done.
    —Dick Grune

Contents
 [hide] 

    * 1 Description
          o 1.1 Example
    * 2 Optimization
    * 3 References
    * 4 External links

[edit] Description

Here is pseudocode for the gnome sort using a zero-based array:

procedure gnomeSort(a[])
    pos := 1
    while pos < length(a)
        if (a[pos] >= a[pos-1])
            pos := pos + 1
        else
            swap a[pos] and a[pos-1]
            if (pos > 1)
                pos := pos - 1
            else
                pos := pos + 1
            end if
        end if
    end while
end procedure

[edit] Example

Given an unsorted array, a = [5, 3, 2, 4], the gnome sort would take the following steps during the while loop. The "current position" is highlighted in bold:
Current array 	Action to take
[5, 3, 2, 4] 	a[pos] < a[pos-1], swap:
[3, 5, 2, 4] 	a[pos] >= a[pos-1], increment pos:
[3, 5, 2, 4] 	a[pos] < a[pos-1], swap and pos > 1, decrement pos:
[3, 2, 5, 4] 	a[pos] < a[pos-1], swap and pos <= 1, increment pos:
[2, 3, 5, 4] 	a[pos] >= a[pos-1], increment pos:
[2, 3, 5, 4] 	a[pos] < a[pos-1], swap and pos > 1, decrement pos:
[2, 3, 4, 5] 	a[pos] >= a[pos-1], increment pos:
[2, 3, 4, 5] 	a[pos] >= a[pos-1], increment pos:
[2, 3, 4, 5] 	pos == length(a), finished.
[edit] Optimization

The gnome sort may be optimized by introducing a variable to store the position before traversing back toward the beginning of the list. This would allow the "gnome" to teleport back to his previous position after moving a flower pot. With this optimization, the gnome sort would become a variant of the insertion sort.

Here is pseudocode for an optimized gnome sort using a zero-based array:

procedure optimizedGnomeSort(a[])
    pos := 1
    last := 0
    while pos < length(a)
        if (a[pos] >= a[pos-1])
            if (last != 0)
                pos := last
                last := 0
            end if
            pos := pos + 1
        else
            swap a[pos] and a[pos-1]
            if (pos > 1)
                if (last == 0)
                    last := pos
                end if
                pos := pos - 1
            else
                pos := pos + 1
            end if
        end if
    end while
end procedure

